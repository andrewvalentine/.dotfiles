# A list of useful comands

# system profiler via terminal
/usr/sbin/system_profiler

# get serial number
system_profiler SPHardwareDataType

# turn on verbose boot
sudo nvram boot-args="-v"

# turn off verbose boot
sudo nvram boot-args=

# unload junos pulse
launchctl unload -w /Library/LaunchAgents/net.juniper.pulsetray.plist

# load junos pulse
launchctl load -w /Library/LaunchAgents/net.juniper.pulsetray.plist

# lock screen
/System/Library/CoreServices/Menu\ Extras/User.menu/Contents/Resources/CGSession -suspend

# show encrypted storage volumes
diskutil corestorage list

# unlock encrypted disk
diskutil corestorage unlockVolume UUID -stdinpassphrase

# sleep from terminal
pmset sleepnow

# release/renew DHCP
sudo ipconfig set (DEVICEINTERFACE) DHCP

# xcode license
sudo xcrun cc

# command line tools without xcode
xcode-select --install

# repair file permissions
sudo diskutil repairPermissions /

# hide folder
chflags hidden /path/to/folder/

# show hidden files
defaults write com.apple.finder AppleShowAllFiles true

# unhide user library
chflags nohidden ~/Library

# disable iCloud autosave
defaults write NSGlobalDomain NSDocumentSaveNewDocumentsToCloud -bool false

# create bootable img
hdiutil convert -format UDRW -o ~/path/to/target.img ~/path/to/os.iso

# create bootable disk
sudo dd if=/path/to/downloaded.img of=/dev/rdiskN bs=1m

# if ARD locks screen
ps -ax | grep AppleVNCServer

# convert autopkg recipe to "proper" xml
plutil -convert xml1 /path/to/recipe

# get 10 largests dirs
du -a /var | sort -n -r | head -n 10

# get attached USB devices
system_profiler SPUSBDataType

# remount ejected usb drive
sudo kextunload /System/Library/Extensions/IOUSBMassStorageDriver.kext && sudo kextload /System/Library/Extensions/IOUSBMassStorageDriver.kext

# list dependencies for given brew
brew deps $brew

# check brew dependencies
brew deps --installed --tree

# what brew use this brew
brew uses --installed $brew

# cleanup d/l'd, uninstalled brews
brew cleanup -s

# add gatekeeper exception
spctl --add /path/to/Application.app
spctl --remove /path/to/Application.app

# Safe Mode status
nvram boot-args

# Enable safe mode
sudo nvram boot-args="-x"

# Disable safe mode
sudo nvram boot-args=""

# Check local admins
dscl . read /Groups/admin
OR
dsmemberutil checkmembership -U username -G admin

# Get image pixel size
sips -g pixelWidth /path/to/file
sips -g pixelHeight /path/to/file

# Yank/put commands in vim
:! <ctrl+r>"

# Add printer from terminal
lpadmin -p "NAME" -E -v "URL" -P "PPD" -D "DESCRIPTION" -o printer-is-shared=false

# Add all users to lpadmin group
sudo dseditgroup -o edit -n /Local/Default -a everyone -t group lpadmin

# Generate random password
openssl rand -base64 6

# Install setuptools/pip/virtualenv
wget https://bootstrap.pypa.io/ez_setup.py
python ez_setup.py --user
wget https://bootstrap.pypa.io/get-pip.py
python get-pip.py --user
pip install â€“user virtualenv

# Check hash of Munki .dmg
shasum -a 256 /path/to/dmg

# Restart ARD
sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart -restart -agent
# Start ARD with access rights for admins
sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart -activate -configure -access -on -users admin -privs -all -restart -agent -menu

# Read property from .plist
/usr/libexec/PlistBuddy  -c "print :CFBundleVersion" /Applications/$APP.app/Contents/Info.plist

# Add quarantine attribute
xattr -p (-r) com.apple.quarantine file > file.xattr
xattr -w (-r) com.apple.quarantine "`cat file.xattr`" path/to/file/or/app

# Get DFS referral
smbutil dfs smb://path/to/share

# Use SMB1 stack
echo "[default]" >> ~/Library/Preferences/nsmb.conf; echo "smb_neg=smb1_only" >> ~/Library/Preferences/nsmb.conf
# Reset to SMB2 stack
rm ~/Library/Preferences/nsmb.conf

# Check user group membership
dscl . search /Groups GroupMembership $USER

# Set volume to 0
sudo osascript -e "set Volume 0"

# Get board ID
ioreg -l | awk -F\" '/board-id/ { print $4 }'

# Get Macbook model
system_profiler SPHardwareDataType | grep "Model Identifier"
OR
sysctl hw.model

# Hash a given password
openssl passwd -1 -salt xyz $password

# If you get this error:
# xterm-256color: Unknown terminal type
export TERM=xterm

# SSH tunnel
ssh -L 5901:host.domain:5900 user@server.domain

# Check cert expiry date
echo q | openssl s_client -connect host:port | openssl x509 -noout -enddate

# Check binary entitlements
codesign -d --entitlements - /path/to/binary
